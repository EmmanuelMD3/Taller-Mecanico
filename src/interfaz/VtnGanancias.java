/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package interfaz;

import dao.EmpleadoDAO;
import dao.GananciaDAO;
import java.time.LocalDate;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import modelo.Empleado;
import modelo.Ganancia;

/**
 *
 * @author chemo
 */
public class VtnGanancias extends javax.swing.JInternalFrame
{

    /**
     * Creates new form VtnGanancias
     */
    public VtnGanancias()
    {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaGanancias = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        tablaGanancias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID", "EMPLEADO", "FEHCA INICIO", "FECHA FINAL", "TOTAL GENERAO"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaGanancias);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 1150, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
        generarGananciasAutomaticamente();
        llenarTablaGanancias();
    }//GEN-LAST:event_formInternalFrameOpened

    private void llenarTablaGanancias()
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaGanancias.getModel();
        modelo.setRowCount(0);

        List<Ganancia> lista = GananciaDAO.listarGanancias();

        for (Ganancia g : lista)
        {
            String nombreEmpleado = EmpleadoDAO.obtenerNombrePorId2(g.getId_empleado());

            modelo.addRow(new Object[]
            {
                g.getId_ganancia(),
                nombreEmpleado,
                g.getFecha_inicio(),
                g.getFecha_fin(),
                String.format("$%.2f", g.getTotal_generado())
            });
        }
    }

    private void generarGananciasAutomaticamente()
    {
        List<Empleado> empleados = EmpleadoDAO.listarEmpleados();

        for (Empleado empleado : empleados)
        {
            int idEmpleado = empleado.getId_empleado();

            LocalDate ahora = LocalDate.now();
            LocalDate primerDiaMes = ahora.withDayOfMonth(1);
            LocalDate ultimoDiaMes = ahora.withDayOfMonth(ahora.lengthOfMonth());

            java.sql.Date fechaInicio = java.sql.Date.valueOf(primerDiaMes);
            java.sql.Date fechaFin = java.sql.Date.valueOf(ultimoDiaMes);

            double total = GananciaDAO.calcularTotalGanado(idEmpleado, fechaInicio, fechaFin);

            if (GananciaDAO.existeGananciaParaEmpleado(idEmpleado, fechaInicio, fechaFin))
            {
                GananciaDAO.actualizarGanancia(idEmpleado, fechaInicio, fechaFin, total);
            } else
            {
                Ganancia nueva = new Ganancia(idEmpleado, fechaInicio, fechaFin, total);
                GananciaDAO.insertarGanancia(nueva);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaGanancias;
    // End of variables declaration//GEN-END:variables
}

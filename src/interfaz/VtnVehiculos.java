/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package interfaz;

import cjb.ci.CtrlInterfaz;
import dao.PropietarioDAO;
import dao.VehiculoDAO;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import modelo.Propietario;
import modelo.Vehiculo;

/**
 *
 * @author chemo
 */
public class VtnVehiculos extends javax.swing.JInternalFrame
{

    /**
     * Creates new form VtnDueño
     */
    public VtnVehiculos()
    {
        initComponents();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        buscar.getDocument().addDocumentListener(new javax.swing.event.DocumentListener()
        {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarVehiculos();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarVehiculos();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarVehiculos();
            }
        });
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        txtRutaImagen = new javax.swing.JTextField();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVehiculos = new javax.swing.JTable();
        buscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        placaJT = new javax.swing.JTextField();
        lblImagenVehiculo = new javax.swing.JLabel();
        imagenPanel = new javax.swing.JPanel();
        marcaJT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        alta = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        modeloJT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        propietarioCB = new javax.swing.JComboBox<>();
        anioCB = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        modificar = new javax.swing.JButton();

        txtRutaImagen.setText("jTextField1");

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setPreferredSize(new java.awt.Dimension(1150, 520));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tablaVehiculos.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tablaVehiculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID VEHICULO", "PLACA ", "MARCA", "MODELO", "AÑO", "ID PROPIETARIO", "IMAGEN"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaVehiculos.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tablaVehiculosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVehiculos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 750, 390));

        buscar.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        buscar.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                buscarMouseClicked(evt);
            }
        });
        buscar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 560, -1));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda-de-lupa.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        jLabel1.setText("VEHICULOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("INFORMACION");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 0, -1, -1));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Placa:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, -1, -1));

        placaJT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        getContentPane().add(placaJT, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 150, -1));

        lblImagenVehiculo.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblImagenVehiculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/carpeta.png"))); // NOI18N
        lblImagenVehiculo.setText("Imagen:");
        lblImagenVehiculo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImagenVehiculo.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblImagenVehiculoMouseClicked(evt);
            }
        });
        getContentPane().add(lblImagenVehiculo, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 210, -1, -1));

        imagenPanel.setEnabled(false);
        getContentPane().add(imagenPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 250, 360, 190));

        marcaJT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        marcaJT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                marcaJTActionPerformed(evt);
            }
        });
        getContentPane().add(marcaJT, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 60, 180, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/bote-de-basura.png"))); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, -1, 40));

        alta.setBackground(new java.awt.Color(102, 255, 102));
        alta.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        alta.setForeground(new java.awt.Color(255, 255, 255));
        alta.setText("ALTA");
        alta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                altaActionPerformed(evt);
            }
        });
        getContentPane().add(alta, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 460, 110, 30));

        limpiar.setBackground(new java.awt.Color(255, 51, 51));
        limpiar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        limpiar.setForeground(new java.awt.Color(255, 255, 255));
        limpiar.setText("LIMPIAR");
        limpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        limpiar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 460, 110, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setText("Marca:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 30, -1, -1));

        modeloJT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        modeloJT.setToolTipText("");
        modeloJT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                modeloJTActionPerformed(evt);
            }
        });
        getContentPane().add(modeloJT, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, 360, -1));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Modelo:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, -1, -1));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel9.setText("Año:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 150, -1, -1));

        propietarioCB.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        getContentPane().add(propietarioCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 180, 250, -1));

        anioCB.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        anioCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));
        getContentPane().add(anioCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 180, 80, -1));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel10.setText("Propietario:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 150, -1, -1));

        modificar.setBackground(new java.awt.Color(153, 153, 255));
        modificar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        modificar.setForeground(new java.awt.Color(255, 255, 255));
        modificar.setText("MODIFICAR");
        modificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modificar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 460, -1, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buscarMouseClicked
    {//GEN-HEADEREND:event_buscarMouseClicked

    }//GEN-LAST:event_buscarMouseClicked

    private void buscarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buscarActionPerformed
    {//GEN-HEADEREND:event_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarActionPerformed

    private void marcaJTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_marcaJTActionPerformed
    {//GEN-HEADEREND:event_marcaJTActionPerformed

    }//GEN-LAST:event_marcaJTActionPerformed

    private void altaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_altaActionPerformed
    {//GEN-HEADEREND:event_altaActionPerformed
        String placa = placaJT.getText();
        String modelo = modeloJT.getText();
        String marca = marcaJT.getText();

        if (placa.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "La placa no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (modelo.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "El modelo no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!placa.matches("^[A-Z]{3}-?\\d{3,4}|[A-Z]{2}-?\\d{2}-?[A-Z]{2}|[A-Z]{2}-?\\d{4}|\\d{3}-?[A-Z]{3}|[A-Z]\\d{6}$"))
        {
            JOptionPane.showMessageDialog(this, "Placa inválida. Los formatos aceptados son:\n"
                    + "- AAA-999 (antiguo)\n"
                    + "- AA-99-AA (nuevo)\n"
                    + "- AA-9999 (nuevo)\n"
                    + "- 999-AAA (nuevo)\n"
                    + "- A999999 (nuevo)", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int anio = Integer.parseInt(anioCB.getSelectedItem().toString());

        String nombreSeleccionado = (String) propietarioCB.getSelectedItem();

        PropietarioDAO propietarioDAO = new PropietarioDAO();
        int idPropietario = propietarioDAO.obtenerIdPorNombre(nombreSeleccionado);

        if (idPropietario == -1)
        {
            JOptionPane.showMessageDialog(this, "No se encontró el propietario.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String rutaImagen = txtRutaImagen.getText();
        if (rutaImagen.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Vehiculo nuevoVehiculo = new Vehiculo(0, placa, marca, modelo, anio, idPropietario, rutaImagen);

        VehiculoDAO vehiculoDAO = new VehiculoDAO();
        boolean exito = vehiculoDAO.insertarVehiculo(nuevoVehiculo);

        if (exito)
        {
            JOptionPane.showMessageDialog(this, "Vehículo agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            llenarTablaVehiculos();
        } else
        {
            JOptionPane.showMessageDialog(this, "Error al agregar el vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_altaActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarActionPerformed
    {//GEN-HEADEREND:event_limpiarActionPerformed
        CtrlInterfaz.limpia(placaJT, marcaJT, modeloJT);

        anioCB.setSelectedIndex(0);
        propietarioCB.setSelectedIndex(0);

        imagenPanel.removeAll();
        imagenPanel.repaint();
    }//GEN-LAST:event_limpiarActionPerformed

    private void modeloJTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modeloJTActionPerformed
    {//GEN-HEADEREND:event_modeloJTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modeloJTActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
        llenarComboPropietarios(propietarioCB);
        llenarTablaVehiculos();
    }//GEN-LAST:event_formInternalFrameOpened

    private void lblImagenVehiculoMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblImagenVehiculoMouseClicked
    {//GEN-HEADEREND:event_lblImagenVehiculoMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar imagen del vehículo");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif"));

        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION)
        {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String rutaImagen = archivoSeleccionado.getAbsolutePath();

            mostrarImagenEnPanel(archivoSeleccionado);

            txtRutaImagen.setText(rutaImagen);
        }
    }//GEN-LAST:event_lblImagenVehiculoMouseClicked

    private void tablaVehiculosMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tablaVehiculosMouseClicked
    {//GEN-HEADEREND:event_tablaVehiculosMouseClicked
        int filaSeleccionada = tablaVehiculos.getSelectedRow();

        if (filaSeleccionada != -1)
        {
            DefaultTableModel modeloTabla = (DefaultTableModel) tablaVehiculos.getModel();

            String placaValor = (String) modeloTabla.getValueAt(filaSeleccionada, 1);
            String marcaValor = (String) modeloTabla.getValueAt(filaSeleccionada, 2);
            String modeloValor = (String) modeloTabla.getValueAt(filaSeleccionada, 3);
            int anioValor = (int) modeloTabla.getValueAt(filaSeleccionada, 4);
            int idPropietario = (int) modeloTabla.getValueAt(filaSeleccionada, 5);
            String rutaImagen = (String) modeloTabla.getValueAt(filaSeleccionada, 6);

            placaJT.setText(placaValor);
            marcaJT.setText(marcaValor);
            modeloJT.setText(modeloValor);

            for (int i = 0; i < anioCB.getItemCount(); i++)
            {
                if (anioCB.getItemAt(i).equals(String.valueOf(anioValor)))
                {
                    anioCB.setSelectedIndex(i);
                    break;
                }
            }

            PropietarioDAO propietarioDAO = new PropietarioDAO();
            String nombrePropietario = propietarioDAO.obtenerNombrePorId(idPropietario);

            if (nombrePropietario != null)
            {
                for (int i = 0; i < propietarioCB.getItemCount(); i++)
                {
                    if (propietarioCB.getItemAt(i).equals(nombrePropietario))
                    {
                        propietarioCB.setSelectedIndex(i);
                        break;
                    }
                }
            }

            if (rutaImagen != null && !rutaImagen.isEmpty())
            {
                mostrarImagenEnPanel(rutaImagen);
                txtRutaImagen.setText(rutaImagen);
            } else
            {
                imagenPanel.removeAll();
                imagenPanel.repaint();
                txtRutaImagen.setText("");
            }
        }
    }//GEN-LAST:event_tablaVehiculosMouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jLabel6MouseClicked
    {//GEN-HEADEREND:event_jLabel6MouseClicked
        int filaSeleccionada = tablaVehiculos.getSelectedRow();

        if (filaSeleccionada < 0 || filaSeleccionada >= tablaVehiculos.getRowCount())
        {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un vehículo válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Está seguro de que desea eliminar el vehículo seleccionado?",
                "Confirmación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (confirmacion == JOptionPane.YES_OPTION)
        {
            DefaultTableModel modeloTabla = (DefaultTableModel) tablaVehiculos.getModel();
            Object valorCelda = tablaVehiculos.getValueAt(filaSeleccionada, 0); // ID VEHICULO

            long idVehiculo;
            try
            {
                idVehiculo = Long.parseLong(valorCelda.toString());
            } catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(this, "Error al obtener el ID del vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            VehiculoDAO vehiculoDAO = new VehiculoDAO();
            vehiculoDAO.eliminarVehiculo(idVehiculo);

            llenarTablaVehiculos();
            JOptionPane.showMessageDialog(this, "Vehículo eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jLabel6MouseClicked

    private void modificarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modificarActionPerformed
    {//GEN-HEADEREND:event_modificarActionPerformed
        PropietarioDAO propietarioDAO = new PropietarioDAO();
        Propietario propietarioActualizado = new Propietario();
        Vehiculo vehiculoActualizado = new Vehiculo();
        VehiculoDAO vehiculoDAO = new VehiculoDAO();

        int filaSeleccionada = tablaVehiculos.getSelectedRow();

        if (filaSeleccionada == -1)
        {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Vehículo para actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) tablaVehiculos.getModel();

        String nuevoPlaca = placaJT.getText();
        String nuevoMarca = marcaJT.getText();
        String nuevoModelo = modeloJT.getText();

        if (nuevoPlaca.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "La placa no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (nuevoModelo.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "El modelo no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!nuevoPlaca.matches("^[A-Z]{3}-?\\d{3,4}|[A-Z]{2}-?\\d{2}-?[A-Z]{2}|[A-Z]{2}-?\\d{4}|\\d{3}-?[A-Z]{3}|[A-Z]\\d{6}$"))
        {
            JOptionPane.showMessageDialog(this, "Placa inválida. Los formatos aceptados son:\n"
                    + "- AAA-999 (antiguo)\n"
                    + "- AA-99-AA (nuevo)\n"
                    + "- AA-9999 (nuevo)\n"
                    + "- 999-AAA (nuevo)\n"
                    + "- A999999 (nuevo)", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try
        {
            int nuevoAnio = Integer.parseInt(anioCB.getSelectedItem().toString());
            String nombreSeleccionado = (String) propietarioCB.getSelectedItem();
            int nuevoDueño = propietarioDAO.obtenerIdPorNombre(nombreSeleccionado);

            if (nuevoDueño == -1)
            {
                JOptionPane.showMessageDialog(this, "No se encontró al propietario.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String rutaImagen = txtRutaImagen.getText();  

            Object valorCelda = modeloTabla.getValueAt(filaSeleccionada, 0);
            int codigo;

            try
            {
                codigo = Integer.parseInt(valorCelda.toString());
            } catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(this, "Error al obtener el ID del vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            vehiculoActualizado.setId_vehiculo(codigo);
            vehiculoActualizado.setPlaca(nuevoPlaca);
            vehiculoActualizado.setMarca(nuevoMarca);
            vehiculoActualizado.setModelo(nuevoModelo);
            vehiculoActualizado.setAño(nuevoAnio);
            vehiculoActualizado.setId_propietario(nuevoDueño);
            vehiculoActualizado.setRutaImagen(rutaImagen);  

            boolean exito = vehiculoDAO.modificarVehiculo(vehiculoActualizado);
            if (exito)
            {
                JOptionPane.showMessageDialog(this, "Vehículo actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                llenarTablaVehiculos();
            } else
            {
                JOptionPane.showMessageDialog(this, "Error al actualizar el vehículo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Error al parsear el año. Asegúrese de que sea un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_modificarActionPerformed
    public void filtrarVehiculos()
    {
        String textoBusqueda = buscar.getText().trim().toLowerCase();
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaVehiculos.getModel();

        modeloTabla.setRowCount(0);

        PropietarioDAO propietarioDAO = new PropietarioDAO();
        VehiculoDAO vehiculoDAO = new VehiculoDAO();

        List<Vehiculo> vehiculos = vehiculoDAO.listarVehiculos();

        for (Vehiculo vehiculo : vehiculos)
        {
            if (vehiculo.getPlaca().toLowerCase().contains(textoBusqueda))
            {
                Object[] fila =
                {
                    vehiculo.getId_vehiculo(),
                    vehiculo.getPlaca(),
                    vehiculo.getMarca(),
                    vehiculo.getModelo(),
                    vehiculo.getAño(),
                    vehiculo.getId_propietario(),
                    vehiculo.getRutaImagen()
                };
                modeloTabla.addRow(fila);
            }
        }
    }

    private void mostrarImagenEnPanel(String ruta)
    {
        imagenPanel.removeAll();
        imagenPanel.repaint();

        ImageIcon iconoOriginal = new ImageIcon(ruta);
        Image imagenEscalada = iconoOriginal.getImage().getScaledInstance(
                imagenPanel.getWidth(), imagenPanel.getHeight(), Image.SCALE_SMOOTH
        );

        JLabel etiqueta = new JLabel(new ImageIcon(imagenEscalada));
        etiqueta.setHorizontalAlignment(JLabel.CENTER);
        etiqueta.setVerticalAlignment(JLabel.CENTER);

        imagenPanel.setLayout(new BorderLayout());
        imagenPanel.add(etiqueta, BorderLayout.CENTER);
        imagenPanel.revalidate();
    }

    private void mostrarImagenEnPanel(File archivoImagen)
    {
        try
        {
            Image imagen = ImageIO.read(archivoImagen);

            imagen = imagen.getScaledInstance(imagenPanel.getWidth(), imagenPanel.getHeight(), Image.SCALE_SMOOTH);

            ImageIcon icono = new ImageIcon(imagen);

            Graphics g = imagenPanel.getGraphics();
            g.drawImage(imagen, 0, 0, imagenPanel.getWidth(), imagenPanel.getHeight(), null);
        } catch (IOException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar la imagen.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void llenarTablaVehiculos()
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaVehiculos.getModel();
        modelo.setRowCount(0);

        List<modelo.Vehiculo> vehiculos = VehiculoDAO.listarVehiculos();

        for (modelo.Vehiculo vehiculo : vehiculos)
        {
            modelo.addRow(new Object[]
            {
                vehiculo.getId_vehiculo(),
                vehiculo.getPlaca(),
                vehiculo.getMarca(),
                vehiculo.getModelo(),
                vehiculo.getAño(),
                vehiculo.getId_propietario(),
                vehiculo.getRutaImagen(),
                vehiculo.getRutaImagen()
            });
        }
    }

    public void llenarComboPropietarios(JComboBox<String> comboPropietarios)
    {
        VehiculoDAO vehiculosDAO = new VehiculoDAO();
        List<Propietario> listaPropietarios = vehiculosDAO.obtenerTodosLosPropietarios();

        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        modelo.addElement("Seleccione un propietario");

        for (Propietario propietario : listaPropietarios)
        {
            modelo.addElement(propietario.getNombre());
        }
        comboPropietarios.setModel(modelo);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alta;
    private javax.swing.JComboBox<String> anioCB;
    private javax.swing.JTextField buscar;
    private javax.swing.JPanel imagenPanel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImagenVehiculo;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField marcaJT;
    private javax.swing.JTextField modeloJT;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField placaJT;
    private javax.swing.JComboBox<String> propietarioCB;
    private javax.swing.JTable tablaVehiculos;
    private javax.swing.JTextField txtRutaImagen;
    // End of variables declaration//GEN-END:variables
}

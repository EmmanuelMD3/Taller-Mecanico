/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package interfaz;

import dao.EmpleadoDAO;
import dao.MantenimientoDAO;
import dao.VehiculoDAO;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import modelo.Empleado;
import modelo.Mantenimiento;
import modelo.Vehiculo;
import cjb.ci.CtrlInterfaz;

/**
 *
 * @author chemo
 */
public class VtnMantenimientos extends javax.swing.JInternalFrame
{

    private com.toedter.calendar.JDateChooser fecha;

    /**
     * Creates new form VtnDue√±o
     */
    public VtnMantenimientos()
    {
        initComponents();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);

        fecha = new com.toedter.calendar.JDateChooser();

        fecha.setBounds(0, 0, 150, 30);

        calendario.setLayout(null);

        calendario.add(fecha);

        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        buscar.getDocument().addDocumentListener(new javax.swing.event.DocumentListener()
        {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarMantenimiento();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarMantenimiento();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e)
            {
                filtrarMantenimiento();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMantenimientos = new javax.swing.JTable();
        buscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        modificar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        alta = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripccionJT = new javax.swing.JTextArea();
        calendario = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        comboVehiculos = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboEmpleados = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setPreferredSize(new java.awt.Dimension(1150, 520));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tablaMantenimientos.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tablaMantenimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID MANTENIMIENTO", "DESCRIPCCION", "FECHA", "ID VEHICULO", "ID EMPLEADO"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaMantenimientos.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tablaMantenimientosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMantenimientos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 750, 390));

        buscar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        buscar.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                buscarMouseClicked(evt);
            }
        });
        buscar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 560, -1));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda-de-lupa.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        jLabel1.setText("MANTENIMIENTOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel3.setText("INFORMACION");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 50, -1, -1));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Descripccion:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, -1, -1));

        modificar.setBackground(new java.awt.Color(153, 153, 255));
        modificar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        modificar.setForeground(new java.awt.Color(255, 255, 255));
        modificar.setText("MODIFICAR");
        modificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modificar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 450, 110, 30));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/bote-de-basura.png"))); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, -1, 40));

        alta.setBackground(new java.awt.Color(102, 255, 102));
        alta.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        alta.setForeground(new java.awt.Color(255, 255, 255));
        alta.setText("ALTA");
        alta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                altaActionPerformed(evt);
            }
        });
        getContentPane().add(alta, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 450, 110, 30));

        limpiar.setBackground(new java.awt.Color(255, 51, 51));
        limpiar.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        limpiar.setForeground(new java.awt.Color(255, 255, 255));
        limpiar.setText("LIMPIAR");
        limpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        limpiar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 450, 110, 30));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel7.setText("Empleado:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 300, -1, -1));

        descripccionJT.setColumns(20);
        descripccionJT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        descripccionJT.setRows(5);
        jScrollPane2.setViewportView(descripccionJT);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, 370, -1));

        calendario.setBackground(new java.awt.Color(255, 255, 255));
        calendario.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        getContentPane().add(calendario, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 260, 150, 30));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Fecha:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 230, -1, -1));

        comboVehiculos.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        comboVehiculos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboVehiculos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(comboVehiculos, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 330, 180, -1));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel9.setText("Vehiculo: ");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 300, -1, -1));

        comboEmpleados.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        comboEmpleados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboEmpleados.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(comboEmpleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 330, 170, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_buscarMouseClicked
    {//GEN-HEADEREND:event_buscarMouseClicked

    }//GEN-LAST:event_buscarMouseClicked

    private void buscarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buscarActionPerformed
    {//GEN-HEADEREND:event_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarActionPerformed

    private void altaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_altaActionPerformed
    {//GEN-HEADEREND:event_altaActionPerformed
        String descipccion = descripccionJT.getText().trim();
        if (descipccion.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "La Descripccion no puede estar vac√≠a.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String vehiculoSeleccionado = (String) comboVehiculos.getSelectedItem();

        VehiculoDAO vehiculoDAO = new VehiculoDAO();
        int idVehiculo = vehiculoDAO.obtenerIdPorPlaca(vehiculoSeleccionado);

        String empledoSeleccionado = (String) comboEmpleados.getSelectedItem();

        EmpleadoDAO empleadoDAO = new EmpleadoDAO();
        int idEmpleado = empleadoDAO.obtenerIdPorNombre(empledoSeleccionado);

        if (idVehiculo == -1)
        {
            JOptionPane.showMessageDialog(this, "No se encontr√≥ el Vehiculo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (idEmpleado == -1)
        {
            JOptionPane.showMessageDialog(this, "No se encontr√≥ el Empleado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (fecha.getDate() == null)
        {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fecha.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.sql.Date fechaSeleccionada = new java.sql.Date(fecha.getDate().getTime());

        Mantenimiento nuevoMantenimiento = new Mantenimiento(0, descipccion, fechaSeleccionada, idVehiculo, idEmpleado);
        MantenimientoDAO manetnieminetoDao = new MantenimientoDAO();
        boolean exito = manetnieminetoDao.insertarMantenimiento(nuevoMantenimiento);
        if (exito)
        {
            JOptionPane.showMessageDialog(this, "Mantenimiento agregado con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
            llenarTablaMantenimientos();
        } else
        {
            JOptionPane.showMessageDialog(this, "Mantenimiento no agregado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_altaActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_limpiarActionPerformed
    {//GEN-HEADEREND:event_limpiarActionPerformed
        CtrlInterfaz.limpia(descripccionJT);
        comboEmpleados.setSelectedIndex(0);
        comboVehiculos.setSelectedIndex(0);

        fecha.setDate(null);
    }//GEN-LAST:event_limpiarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameOpened
    {//GEN-HEADEREND:event_formInternalFrameOpened
        llenarComboEmpleados(comboEmpleados);
        llenarComboVehiculos(comboVehiculos);
        llenarTablaMantenimientos();
    }//GEN-LAST:event_formInternalFrameOpened

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jLabel6MouseClicked
    {//GEN-HEADEREND:event_jLabel6MouseClicked
        int filaSeleccionada = tablaMantenimientos.getSelectedRow();

        if (filaSeleccionada < 0 || filaSeleccionada >= tablaMantenimientos.getRowCount())
        {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un mantenimiento v√°lido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¬øEst√° seguro de que desea eliminar el mantenimiento seleccionado?",
                "Confirmaci√≥n",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (confirmacion == JOptionPane.YES_OPTION)
        {
            DefaultTableModel modeloTabla = (DefaultTableModel) tablaMantenimientos.getModel();
            Object valorCelda = tablaMantenimientos.getValueAt(filaSeleccionada, 0);

            long idMantenimiento;
            try
            {
                idMantenimiento = Long.parseLong(valorCelda.toString());
            } catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(this, "Error al obtener el ID del mantenimiento.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            MantenimientoDAO mantenimientoDAO = new MantenimientoDAO();
            mantenimientoDAO.eliminarMantenimiento(idMantenimiento);

            llenarTablaMantenimientos();
            JOptionPane.showMessageDialog(this, "Mantenimiento eliminado correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void tablaMantenimientosMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tablaMantenimientosMouseClicked
    {//GEN-HEADEREND:event_tablaMantenimientosMouseClicked
        int filaSeleccionada = tablaMantenimientos.getSelectedRow();

        if (filaSeleccionada != -1)
        {
            DefaultTableModel modeloTabla = (DefaultTableModel) tablaMantenimientos.getModel();

            String descripcion = (String) modeloTabla.getValueAt(filaSeleccionada, 1);
            Date fecha = (Date) modeloTabla.getValueAt(filaSeleccionada, 2);
            int idVehiculo = (int) modeloTabla.getValueAt(filaSeleccionada, 3);
            int idEmpleado = (int) modeloTabla.getValueAt(filaSeleccionada, 4);

            descripccionJT.setText(descripcion);

            this.fecha.setDate(fecha);

            VehiculoDAO vehiculoDAO = new VehiculoDAO();
            String placaVehiculo = vehiculoDAO.obtenerPlacaPorId(idVehiculo);

            if (placaVehiculo != null)
            {
                for (int i = 0; i < comboVehiculos.getItemCount(); i++)
                {
                    if (comboVehiculos.getItemAt(i).equals(placaVehiculo))
                    {
                        comboVehiculos.setSelectedIndex(i);
                        break;
                    }
                }
            }

            EmpleadoDAO empleadoDAO = new EmpleadoDAO();
            String nombreEmpleado = empleadoDAO.obtenerNombrePorId(idEmpleado);

            if (nombreEmpleado != null)
            {
                for (int i = 0; i < comboEmpleados.getItemCount(); i++)
                {
                    if (comboEmpleados.getItemAt(i).equals(nombreEmpleado))
                    {
                        comboEmpleados.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_tablaMantenimientosMouseClicked

    private void modificarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modificarActionPerformed
    {//GEN-HEADEREND:event_modificarActionPerformed
        MantenimientoDAO mantenimientoDAO = new MantenimientoDAO();
        VehiculoDAO vehiculoDAO = new VehiculoDAO();
        EmpleadoDAO empleadoDAO = new EmpleadoDAO();
        Mantenimiento mantenimientoActualizado = new Mantenimiento();

        int filaSeleccionada = tablaMantenimientos.getSelectedRow();

        if (filaSeleccionada == -1)
        {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un mantenimiento para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) tablaMantenimientos.getModel();

        String descripcion = descripccionJT.getText().trim();

        if (fecha.getDate() == null)
        {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fecha.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.sql.Date fechaSeleccionada = new java.sql.Date(fecha.getDate().getTime());
        String vehiculoSeleccionado = (String) comboVehiculos.getSelectedItem();
        String empleadoSeleccionado = (String) comboEmpleados.getSelectedItem();

        if (descripcion.isEmpty() || vehiculoSeleccionado == null || empleadoSeleccionado == null)
        {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idVehiculo = vehiculoDAO.obtenerIdPorPlaca(vehiculoSeleccionado);
        int idEmpleado = empleadoDAO.obtenerIdPorNombre(empleadoSeleccionado);

        if (idVehiculo == -1 || idEmpleado == -1)
        {
            JOptionPane.showMessageDialog(this, "No se pudo obtener el ID del veh√≠culo o empleado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idMantenimiento;
        try
        {
            Object valorCelda = modeloTabla.getValueAt(filaSeleccionada, 0);
            idMantenimiento = Integer.parseInt(valorCelda.toString());
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del mantenimiento.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        mantenimientoActualizado.setId_mantenimiento(idMantenimiento);
        mantenimientoActualizado.setDescripccion(descripcion);
        mantenimientoActualizado.setFecha(fechaSeleccionada);
        mantenimientoActualizado.setId_vehiculo(idVehiculo);
        mantenimientoActualizado.setId_empleado(idEmpleado);

        boolean exito = mantenimientoDAO.modificarMantenimiento(mantenimientoActualizado);

        if (exito)
        {
            JOptionPane.showMessageDialog(this, "Mantenimiento actualizado correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
            llenarTablaMantenimientos();
        } else
        {
            JOptionPane.showMessageDialog(this, "Error al actualizar el mantenimiento.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_modificarActionPerformed

    public void filtrarMantenimiento()
    {
        String textoBusqueda = buscar.getText().trim().toLowerCase();
        DefaultTableModel modeloTabla = (DefaultTableModel) tablaMantenimientos.getModel();

        modeloTabla.setRowCount(0);

        MantenimientoDAO mantenimientoDAO = new MantenimientoDAO();

        List<Mantenimiento> mantenimientos = mantenimientoDAO.listarMantenimientoFiltro();

        for (Mantenimiento mantenimiento : mantenimientos)
        {
            if (mantenimiento.getDescripccion().toLowerCase().contains(textoBusqueda))
            {
                Object[] fila =
                {
                    mantenimiento.getId_mantenimiento(),
                    mantenimiento.getDescripccion(),
                    mantenimiento.getFecha(),
                    mantenimiento.getId_vehiculo(),
                    mantenimiento.getId_empleado()
                };
                modeloTabla.addRow(fila);
            }
        }
    }

    private void llenarTablaMantenimientos()
    {
        DefaultTableModel modelo = (DefaultTableModel) tablaMantenimientos.getModel();
        modelo.setRowCount(0);

        List<Mantenimiento> mantenimientos = MantenimientoDAO.listarMantenimiento();

        for (Mantenimiento mantenimiento : mantenimientos)
        {
            Object[] fila =
            {
                mantenimiento.getId_mantenimiento(),
                mantenimiento.getDescripccion(),
                mantenimiento.getFecha(),
                mantenimiento.getId_vehiculo(),
                mantenimiento.getId_empleado()
            };
            modelo.addRow(fila);
        }
    }

    public void llenarComboEmpleados(JComboBox<String> comboEmpleados)
    {
        EmpleadoDAO empleadoDAO = new EmpleadoDAO();

        List<Empleado> listaEmpleados = empleadoDAO.obtenerTodosLosEmpleados();

        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        modelo.addElement("Seleccione un Empleado");

        for (Empleado empleado : listaEmpleados)
        {
            modelo.addElement(empleado.getNombre());
        }
        comboEmpleados.setModel(modelo);
    }

    public void llenarComboVehiculos(JComboBox<String> comboVehiculos)
    {

        VehiculoDAO vehiculoDAO = new VehiculoDAO();

        List<Vehiculo> listaVehiculo = vehiculoDAO.obtenerTodosLosVehiculos();

        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        modelo.addElement("Seleccione un Vehiculo");

        for (Vehiculo vehiculo : listaVehiculo)
        {
            modelo.addElement(vehiculo.getPlaca());

        }
        comboVehiculos.setModel(modelo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alta;
    private javax.swing.JTextField buscar;
    private javax.swing.JPanel calendario;
    private javax.swing.JComboBox<String> comboEmpleados;
    private javax.swing.JComboBox<String> comboVehiculos;
    private javax.swing.JTextArea descripccionJT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JTable tablaMantenimientos;
    // End of variables declaration//GEN-END:variables
}
